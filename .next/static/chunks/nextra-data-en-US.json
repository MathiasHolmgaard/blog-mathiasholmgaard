{"/Backend/u34-docker-containers":{"title":"Hvad er en docker container?","data":{"":"Læringsmål:\nBackend\nViden\nJeg har basal viden om hvad en docker container er","introduktion#Introduktion":"I denne artikel vil jeg gå i dybden med læringsmålet som beskrevet ovenfor. Hvis jeg kan fyldestgørende forklare hvad en docker container er, hvorfor det er en smart teknologi og hvornår det er godt at bruge. Så vil jeg vurdere, at læringsmålet er nået.","hvad-er-en-docker-container#Hvad er en docker container?":"En Docker container er et isoleret miljø som kan virtualisere applikationer. Tænk på det som en lille selvstændig pakke osm indeholder alt hvad en applikation har brug for at køre, såsom kode, runtime, systembiblioteker osv. Det er lidt som en mini-version af et operativ system, men skræddersyet til en specifik applikation.","hvorfor-er-docker-så-smart#Hvorfor er Docker så smart?":"Hver container kører isoleret fra andre containere og værtsmaskinen. Det betyder, at en fejl i en container ikke påvirker andre containere.En container kan køre på stort set alle maskiner, som har Docker installeret. På den måde er det vildt nemt at flytte applikationer mellem forskellige maskiner.Det er nemt at skalere antallet af containere for at håndtere øget belastning på systemet.Containere deler CPU ressourcer med værtsmaskinen, så de er mere effektive end traditionelle virtuelle maskiner. Traditionelle virtuelle maskiner skal man allokere ressourcer til som de optager 100% af, imens den virtuelle maskine er tændt. På en docker container kan man dog godt afgrænse hvor mange ressourcer den må bruge.Med alt ovenstående taget i betragtning så ville man kunne bygge backend i C# og frontend i react. Så man på den måde bedre kan gøre brug af ens teams forskellige styrker. I tilfælde af øget trafik på backend af ens applikation kan man duplikere backend containerne og fordele belastningen på dem. Og hvis der opstår en fejl i eksempelvis backend containeren, så vil frontenden stadig vises til brugeren.\nDet giver os som udviklere et hav af fordele.","hvad-er-forskellen-på-et-docker-image-og-en-docker-container#Hvad er forskellen på et docker image og en docker container?":"Et docker image er en form for arkitekttegning af applikationen og operativ system som skal kører i containeren. Et docker image oprettes med en dockerfil, som man skriver de tekniske specifikationer for miljøet applikationen skal kører i, inde i den container som kommer til at kører det.","hvordan-kan-to-containere-kommunikere#Hvordan kan to containere kommunikere?":"Netværk: Docker-containere kan konfigureres til at kommunikere med hinanden på forskellige måder, f.eks. via et fælles netværk eller ved hjælp af port-mapping.","kilder#Kilder:":"https://aws.amazon.com/compare/the-difference-between-docker-images-and-containers/https://www.docker.com/resources/what-container/"}},"/lm-itsikkerhed":{"title":"Læringsmål","data":{"":"","it-sikkerhed#IT sikkerhed":"","viden---den-studerende-har-viden-om#Viden - Den studerende har viden om":"Kort sigt\nJeg kender forskellen på autentifikation og autorisation.\nJeg har kendskab til begrebet Security By Design\nJeg har kendskab til begrebet Privacy By Design\nJeg har kendskab til OWASP top 10 sikkerhedshuller fundet i web apps\nJeg har kendskab til OWASP top 10 sikkerhedshuller fundet i API’er\n\nLangsigtet læringsmål\nJeg har basal viden burp suite\nJeg kender til basale muligheder med burp suite\n\n\nJeg har basal viden Nmap\nJeg kender til basale muligheder med burp suite","færdigheder---den-studerende-kan#Færdigheder - Den studerende kan":"Kort sigt\nKan udfærdige kvalitetskriterier for abuse cases.\nJeg kan diskutere etik i forhold til at benytte værktøjer som kan benyttes af ondsindet eller godsindet til at bryde ind eller sikre IT infrastruktur.\nJeg kan kryptere følsomme data (f.eks. passwords, personlige oplysninger).\n\nLangsigtet læringsmål\nJeg kan på baggrund af OWASP top 10 designe mit system således at jeg gør en indsats for at sikrer mit system fra de 10 typiske angrebstyper\nJeg kan diskutere etik i forhold til at benytte værktøjer som kan benyttes af ondsindet eller godsindet til at bryde ind eller sikrer IT infrastruktur\nIdentificere abuse cases\nFærdigheder til at skrive et simpelt DDOS script\nFærdigheder til at teste en webapplikations sikkerhed med Burp Suite\nScanne en webapplikation med NMAP","kompetencer---den-studerende-kan#Kompetencer - Den studerende kan":"Med viden om OWASP top 10 og færdigheder til at teste en web applikations sikkerhed kan jeg lave en trusselsvurdering af systemet og påpege (potentielle)sårbarheder i systemet og beskrive hvordan disse kan blive løst.\nJeg kan udvikle en sikker .NET API som forebygger angreb fra OWASP top 10 listen"}},"/lm-backend":{"title":"Læringsmål","data":{"":"","backend-arkitekturdockermicroservices#Backend arkitektur/docker/Microservices":"","viden---den-studerende-har-viden-om#Viden - Den studerende har viden om":"Kortsigtet læringsmål\nForstå koncepter som containers, images, registries og orchestration.\nForstå konceptet bag microservices arkitektur.\nKendskab til relationelle og NoSQL databaser.\nViden om fejlhåndtering og logging mekanismer.\nJeg har kendskab til forskellige kommunikationsmønstre (synchron, asynchron).\nForståelse af service discovery og load balancing.\nForstå af skalering principper for backend systemer.\n\nLangsigtet læringsmål\nJeg har basal viden om hvad et microservice pattern er\nJeg har basal viden om hvad en docker container er","færdigheder---den-studerende-kan#Færdigheder - Den studerende kan":"Jeg kan designe et system som en samling af små, selvstændige services.\nJeg kan implementere klare grænseflader mellem services (f.eks. REST API).\nJeg kan bygge Docker images til dine forskellige services\nJeg kan implementere et Docker-baseret udviklingsmiljø.\nJeg kan forklare forskellen mellem microservice mønster og et monolitisk mønster\nJeg kan bruge Docker Compose til at definere og starte multi-container applikationer.\nJeg kan designe en databasestruktur til en microservice-arkitektur.\nJeg kan implementere fejlhåndtering og logging i en microservice-arkitektur.","kompetencer---den-studerende-kan#Kompetencer - Den studerende kan":"Jeg kan designe og implementere en Docker-baseret arkitektur for en applikation.\nJeg kan designe effektive kommunikationsmønstre mellem services.\nJeg kan modellere data og designe en effektiv databasestruktur.\nJeg kan bygge robuste og skalérbare backend systemer."}},"/":{"title":"Datamatiker blog","data":{"":"","hvad-er-formålet-med-denne-blog#Hvad er formålet med denne blog?":"Formålet er at dokumentere vores 4. semester projekts udvikling.\nJeg vil med denne blog, blogge løbende omkring min udvikling, mine reflektioner og frustrationer.","dette-er-en-nextjs-blog#Dette er en Next.Js blog":"Dokumentationen kan findes her: https://nextra.site."}}}